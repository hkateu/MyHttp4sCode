#  If 'strict' is True, then the Java Toolkit will reject unsigned
#  or unencrypted messages if it expects them signed or encrypted
#  Also will reject the messages if not strictly follow the SAML
onelogin.saml2.strict =  false

# Enable debug mode (to print errors)
onelogin.saml2.debug =  false


## Service Provider Data that we are deploying ##

#  Identifier of the SP entity  (must be a URI)
onelogin.saml2.sp.entityid = https://sso.online.tableau.com/public/sp/metadata/36bfdf3c-ab36-4b92-aeb0-08de3d44d873

# Specifies info about where and how the <AuthnResponse> message MUST be
# returned to the requester, in this case our SP.
# URL Location where the <Response> from the IdP will be returned
onelogin.saml2.sp.assertion_consumer_service.url = https://sso.online.tableau.com/public/sp/SSO/36bfdf3c-ab36-4b92-aeb0-08de3d44d873

# SAML protocol binding to be used when returning the <Response>
# message.  SAMLToolkit supports for this endpoint the
# HTTP-POST binding only
onelogin.saml2.sp.assertion_consumer_service.binding = urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST

# Specifies info about where and how the <Logout Response> message MUST be
# returned to the requester, in this case our SP.
onelogin.saml2.sp.single_logout_service.url = https://localhost:8080/logout

# SAML protocol binding to be used when returning the <LogoutResponse> or sending the <LogoutRequest>
# message.  SAMLToolkit supports for this endpoint the
# HTTP-Redirect binding only
onelogin.saml2.sp.single_logout_service.binding = urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect

# Specifies constraints on the name identifier to be used to
# represent the requested subject.
# Take a look on core/src/main/java/com/onelogin/saml2/util/Constants.java to see the NameIdFormat supported
onelogin.saml2.sp.nameidformat = urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified

# Usually x509cert and privateKey of the SP are provided by files placed at
# the certs folder. But we can also provide them with the following parameters

onelogin.saml2.sp.x509cert = -----BEGIN CERTIFICATE-----MIIFqDCCA5CgAwIBAgIGAYiQNUsUMA0GCSqGSIb3DQEBCwUAMGwxOzA5BgNVBAsMMmNvbS50YWJsZWF1c29mdHdhcmUuc2l0ZXNhbWwuY29yZS51dGlsLkNyeXB0b1V0aWxzMS0wKwYDVQQDDCQzNmJmZGYzYy1hYjM2LTRiOTItYWViMC0wOGRlM2Q0NGQ4NzMwHhcNMjMwNjA1MTAxNjMxWhcNMzMwNjAzMTAxNjMxWjBsMTswOQYDVQQLDDJjb20udGFibGVhdXNvZnR3YXJlLnNpdGVzYW1sLmNvcmUudXRpbC5DcnlwdG9VdGlsczEtMCsGA1UEAwwkMzZiZmRmM2MtYWIzNi00YjkyLWFlYjAtMDhkZTNkNDRkODczMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAub9V7Td0orpMJnn9OAsY8elRrkWe/BGFrg+en22YqqrGbq+XbAa6SovvsI9XCMdEemxW0caElGYt6+W7qYqE/rQS0ltM2qv471lhlof6IGPCJl8t0pgF1do/XPTdmMJGN7I1NALaD72BwzO+Twb1gwj2Kv0vKoyYVP3JFKM1MJ1Dm9zzmhgeLVa6L9X0yd7zsc6G4TH9DQQTEtfTq563YpIZ+2p22MgczRQ3aBvMm7evAUssQJSKpavMN/CNWhutsT/fP5P9ednsKQDSRBINzhiuqckEPPDDOfbzU10sshMsLaao2k1VIUYM++FBW2YJgmciAuCQdTvXlViJdvDSAPP1beKGe7AmELt1eQBoedO2YMk4kc6JxMklXlf87HNJ3uoZmr8uCvMhj99q2SX8ehJaXvWrWDlAswZkVnkQToKIBWr56l695ySSlhAPUnCNT/S2O1lfk+rO+48qNhxuAe0Ev/kud3wuSaQ6sO3So274XKXtqCNkBenUtEyBSrgULwmv2gnCR0IDHRIiH7mlXQjFLqLSKPA7qaScRmr++9pIrhzOR9XBxRgAoBbt2N2Icc+xpUlVfPf3ZMy/CWedVUn6ooEsAgfvzWpig2zEYsrc1fCXLxq0w95wcZl/KW69uUGF7K/SNzF+rIhDJYSS84FzoZGSvf7cLMTOmpdjV1MCAwEAAaNQME4wDAYDVR0TAQH/BAIwADAdBgNVHQ4EFgQUoEMzB7TjuD40RxRx1P4Umv3H5/owHwYDVR0jBBgwFoAUoEMzB7TjuD40RxRx1P4Umv3H5/owDQYJKoZIhvcNAQELBQADggIBAGAFF1tvAQm96Wx0wp3rfZ0mQEz1umLTW8LKiKmE/LqddCLzb4ZDQAaNEAKO6z6H6WmiB44zWrsu5M3yoSE6NJ0NY2dkMWqGF+M2guNlKbSy0uCPbW4217OpSw72Gc/F1nq6Yrb1IKQnv3Pun8+SX3Yzi1CXqqngWqcfK/f6rZxY7rv3wkraNpwhydqaLCTgiVSFB4IIVZDt3uPcv5ZbTGySwIwn5BXkyNW5ysSHUPK2Hcbkx+KfyTqOC4/3TNbZtLu6E5rpPNdHRkA/GIttJI8/sZPg4vgl2QRcWK2HikzCPQYyyvgzppVa8KTsMbhGs0gEjsPqF2ygNDHb0kUiy5TxKTRP09Bv79jN7WY3186Qq/wLF7qfUUj9e9T3jy7lSdpID0ljdG5JY6J6AObVyovEpTuRiNqFDKEepSoIVky0VzbFMo7SuLVvhw+mE1s1L5LD95DOdoFYyePxlbjD8W1fRa4O+zWK9cXNV7zpcGwceloM3FWBO63GCSb2lSc5fWCOgyQDW8aLVAADW1Nucti+2Abv/x+VsNbrgBjfwraTMMIr/Iv5MyWLK9SFrIRCI828trlMHw2gWrP2qQn1vQEQ27S5/+k919JmlV1Sr7BEFvlii1M0MQ49heAEYfl9iKxlWb3qyu26bvcBdqXEE8DuS2e/reLrOfGMoWQqwGJp-----END CERTIFICATE-----

# keytool -printcert -rfc -file saml_sp_certificate.cer

# Future SP certificate, to be used during SP Key roll over
onelogin.saml2.sp.x509certNew = -----BEGIN PUBLIC KEY-----MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAub9V7Td0orpMJnn9OAsY8elRrkWe/BGFrg+en22YqqrGbq+XbAa6SovvsI9XCMdEemxW0caElGYt6+W7qYqE/rQS0ltM2qv471lhlof6IGPCJl8t0pgF1do/XPTdmMJGN7I1NALaD72BwzO+Twb1gwj2Kv0vKoyYVP3JFKM1MJ1Dm9zzmhgeLVa6L9X0yd7zsc6G4TH9DQQTEtfTq563YpIZ+2p22MgczRQ3aBvMm7evAUssQJSKpavMN/CNWhutsT/fP5P9ednsKQDSRBINzhiuqckEPPDDOfbzU10sshMsLaao2k1VIUYM++FBW2YJgmciAuCQdTvXlViJdvDSAPP1beKGe7AmELt1eQBoedO2YMk4kc6JxMklXlf87HNJ3uoZmr8uCvMhj99q2SX8ehJaXvWrWDlAswZkVnkQToKIBWr56l695ySSlhAPUnCNT/S2O1lfk+rO+48qNhxuAe0Ev/kud3wuSaQ6sO3So274XKXtqCNkBenUtEyBSrgULwmv2gnCR0IDHRIiH7mlXQjFLqLSKPA7qaScRmr++9pIrhzOR9XBxRgAoBbt2N2Icc+xpUlVfPf3ZMy/CWedVUn6ooEsAgfvzWpig2zEYsrc1fCXLxq0w95wcZl/KW69uUGF7K/SNzF+rIhDJYSS84FzoZGSvf7cLMTOmpdjV1MCAwEAAQ==-----END PUBLIC KEY-----

# openssl x509 -inform der -in saml_sp_certificate.cer -pubkey -noout

# Requires Format PKCS#8   BEGIN PRIVATE KEY
# If you have     PKCS#1   BEGIN RSA PRIVATE KEY  convert it by   openssl pkcs8 -topk8 -inform pem -nocrypt -in sp.rsa_key -outform pem -out sp.pem
onelogin.saml2.sp.privatekey = 

# Organization
onelogin.saml2.organization.name = SP Java
onelogin.saml2.organization.displayname = SP Java Example
onelogin.saml2.organization.url = http://sp.example.com
onelogin.saml2.organization.lang = en

# Contacts (use indexes to specify multiple contacts, multiple e-mail addresses per contact, multiple phone numbers per contact)
onelogin.saml2.sp.contact[0].contactType=administrative
onelogin.saml2.sp.contact[0].company=ACME
onelogin.saml2.sp.contact[0].given_name=Guy
onelogin.saml2.sp.contact[0].sur_name=hkateu@gmail.com
onelogin.saml2.sp.contact[0].email_address[0]=hkateu@gmail.com
onelogin.saml2.sp.contact[0].email_address[1]=administrative2@example.com
onelogin.saml2.sp.contact[0].telephone_number[0]=+1-123456789
onelogin.saml2.sp.contact[0].telephone_number[1]=+1-987654321
onelogin.saml2.sp.contact[1].contactType=other
onelogin.saml2.sp.contact[1].company=Big Corp
onelogin.saml2.sp.contact[1].email_address=info@example.com

# Legacy contacts (legacy way to specify just a technical and a support contact with minimal info)
onelogin.saml2.contacts.technical.given_name = Technical Guy
onelogin.saml2.contacts.technical.email_address = technical@example.com
onelogin.saml2.contacts.support.given_name = Support Guy
onelogin.saml2.contacts.support.email_address = support@example.com

## Identity Provider Data that we want connect with our SP ##

# Identifier of the IdP entity  (must be a URI)
onelogin.saml2.idp.entityid = http://localhost:8080/metadata

# SSO endpoint info of the IdP. (Authentication Request protocol)
# URL Target of the IdP where the SP will send the Authentication Request Message
onelogin.saml2.idp.single_sign_on_service.url = https://localhost:8080/login

# SAML protocol binding to be used to deliver the <AuthnRequest> message
# to the IdP.  SAMLToolkit supports for this endpoint the
# HTTP-Redirect binding only
onelogin.saml2.idp.single_sign_on_service.binding = urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect

# SLO endpoint info of the IdP.
# URL Location of the IdP where the SP will send the SLO Request
onelogin.saml2.idp.single_logout_service.url = https://localhost:8080/logout

# Optional SLO Response endpoint info of the IdP.
# URL Location of the IdP where the SP will send the SLO Response. If left blank, same URL as onelogin.saml2.idp.single_logout_service.url will be used.
# Some IdPs use a separate URL for sending a logout request and response, use this property to set the separate response url
onelogin.saml2.idp.single_logout_service.response.url =

# SAML protocol binding to be used when returning the <Response>
# message.  SAMLToolkit supports for this endpoint the
# HTTP-Redirect binding only
onelogin.saml2.idp.single_logout_service.binding = urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect

# Public x509 certificate of the IdP
onelogin.saml2.idp.x509cert = -----BEGIN CERTIFICATE-----MIIFazCCA1OgAwIBAgIEATJyoTANBgkqhkiG9w0BAQwFADBmMQswCQYDVQQGEwJLTDEQMA4GA1UECBMHS2FtcGFsYTEQMA4GA1UEBxMHS2FtcGFsYTEOMAwGA1UEChMFeG9uYWwxCzAJBgNVBAsTAklUMRYwFAYDVQQDEw1LYXRldSBIZXJiZXJ0MB4XDTIzMDYwNjExMTQxOVoXDTIzMDkwNDExMTQxOVowZjELMAkGA1UEBhMCS0wxEDAOBgNVBAgTB0thbXBhbGExEDAOBgNVBAcTB0thbXBhbGExDjAMBgNVBAoTBXhvbmFsMQswCQYDVQQLEwJJVDEWMBQGA1UEAxMNS2F0ZXUgSGVyYmVydDCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAIpWMhf8bDV+VNZYN2k4aEQ+xS8Ip5+xuqJevl6waACMKXIAJY1E0esPNjPwWCT8HqcmfV5Nmq3vyiM8tuXLNt1ieCYj5GbLaDDdp014554d3ss0ZOttehDLKpTFFKby701jMTwsBKU/mtSZXNK+7++6ncguJyew+VzU9f+egQiMD86bPIrbE4mro5Tt+MHAo0ab3bJHUueCGeZVcLnSvJe+0pbYHaHZt+8re69IJGIl0F/K9HSdi3Ti7OhVQqJIatPJhFd/1LftRB1ezUfvmPFoev/t4UkBXXLnZnDSRxeyUVKj3dF2OolsovShNYnuyqtmjMbMzo2AtG2tVi8gEEu4WcNjB7VjpoTIzLKZd+KW/7IekegqbgpeLuHbYK4TZVsZIbl8Z9cCa4MxfX4UkkRNFHYV5KrW5BuXiNLLicR4+6BJtwuqqCAKKeSYtFbQnUx0C3yD/6oqo5AA/bV1izrx72T1vdTLV5lmrH7BIEXK5yHFcYHGCM7zyqUZoz+mBham+Wt/yeel90KvM+qOXYVNmTPeUrffJGGnXlzzAg4l3v1Ir5o2c+N93Nhczu3Sca7AXyP54UKMD4UyqeN0UtBM79Vb+w8T3pyqvoLPRv4vSwzBF8196fCFWeZDWBk6q+oSPTXeL7Yzc2zwUdotZxXV1UUlKZHpUnpQmF/SeRN9AgMBAAGjITAfMB0GA1UdDgQWBBQLNyhAoXDeopvDG7ghfqAbb0MAGzANBgkqhkiG9w0BAQwFAAOCAgEAR9TgFxypDFotSZ1lN5dFpW/VqHLRhVcQPvDhYPhbLgDyu1PnukQoQpceZCHdJo0bPYQxXPUuXImnWYK7+9el4JwCVhC2kQg9QXCV8XSlG3eGtEmQ5ZimNqiSvNNbWsMSyORERvyJQUZ223jHWYIoOxsOiaGc1EdUrU9nkrgmjcIMFOHc2lX2hB5a4tsPbcOOSm1HtDRrPkzOUNWGCXXKLDZfFzSzO8EsHu0TxObXa5pGQofhACS0TEVe5mFm1uqdJcgIiOnsOd5zKYC0XZ9Jx//MZ+g6+F9MIfwe2Tar1MowNm0fGFPjiD6qgL/XB6F3k8LpGaDAL5hUd9OJ2uAsXl/eQOIUvca8+m8WkyE0ek65hbEPr+hEXutgQg6nNk5Ar7FSwZC3BYjvmfDM30cBm9vXpaH1Vtmd7YLPXdYCsq+5YGB/Ao1KpSevHwIjeSCerACxAg776UyM9k+fL7oAJHNaLpCbCwx0lnXe9Mr8T4U6t7PoHcHCKNq0337PVgIFIPkZ3K8clSgKnOJLapL59EpZOSlYluRynW+9TKuMAVH0uTB9vdDN/6JeIbyz+QicbuTr3WxnCykppAuNJ2yzxjeUvDCxsYNsQZeuAZ9gs+hqSrfJEzXQAurXMQxNgBXGNd7rvgm0P3h9FVUSma5QxtNTAyJlHRKvK8L679vKCSc=-----END CERTIFICATE-----

# Instead of using the whole x509cert you can use a fingerprint in order to
# validate a SAMLResponse (but you still need the x509cert to validate LogoutRequest and LogoutResponse using the HTTP-Redirect binding).
# But take in mind that the fingerprint, is a hash, so at the end is open to a collision attack that can end on a signature validation bypass,
# that why we don't recommend it use for production environments.
# (openssl x509 -noout -fingerprint -in "idp.crt" to generate it,
# or add for example the -sha256 , -sha384 or -sha512 parameter)
#
# If a fingerprint is provided, then the certFingerprintAlgorithm is required in order to
# let the toolkit know which Algorithm was used. Possible values: sha1, sha256, sha384 or sha512
# 'sha1' is the default value.
# onelogin.saml2.idp.certfingerprint =
onelogin.saml2.idp.certfingerprint_algorithm = sha256

# Security settings
#

# Indicates that the nameID of the <samlp:logoutRequest> sent by this SP
# will be encrypted.
onelogin.saml2.security.nameid_encrypted = false

# Indicates whether the <samlp:AuthnRequest> messages sent by this SP
# will be signed.              [The Metadata of the SP will offer this info]
onelogin.saml2.security.authnrequest_signed = false

# Indicates whether the <samlp:logoutRequest> messages sent by this SP
# will be signed.
onelogin.saml2.security.logoutrequest_signed = false

# Indicates whether the <samlp:logoutResponse> messages sent by this SP
# will be signed.
onelogin.saml2.security.logoutresponse_signed = false

# Indicates a requirement for the <samlp:Response>, <samlp:LogoutRequest> and
# <samlp:LogoutResponse> elements received by this SP to be signed.
onelogin.saml2.security.want_messages_signed = false

# Indicates a requirement for the <saml:Assertion> elements received by this SP to be signed.
onelogin.saml2.security.want_assertions_signed = false

# Indicates a requirement for the Metadata of this SP to be signed.
# Right now supported null (in order to not sign) or true (sign using SP private key)
onelogin.saml2.security.sign_metadata = false

# Indicates a requirement for the Assertions received by this SP to be encrypted
onelogin.saml2.security.want_assertions_encrypted = false

# Indicates a requirement for the NameID received by this SP to be encrypted
onelogin.saml2.security.want_nameid_encrypted = false


# Authentication context.
# Set Empty and no AuthContext will be sent in the AuthNRequest,
# Set comma separated values urn:oasis:names:tc:SAML:2.0:ac:classes:Kerberos,urn:oasis:names:tc:SAML:2.0:ac:classes:Password
onelogin.saml2.security.requested_authncontext = urn:oasis:names:tc:SAML:2.0:ac:classes:Password

# Allows the authn comparison parameter to be set, defaults to 'exact'
onelogin.saml2.security.requested_authncontextcomparison = exact

# Allows duplicated names in the attribute statement
onelogin.saml2.security.allow_duplicated_attribute_name = false

# Indicates if the SP will validate all received xmls.
# (In order to validate the xml, 'strict' and 'wantXMLValidation' must be true).
onelogin.saml2.security.want_xml_validation = true

# Algorithm that the toolkit will use on signing process. Options:
#  'http://www.w3.org/2000/09/xmldsig#rsa-sha1'
#  'http://www.w3.org/2000/09/xmldsig#dsa-sha1'
#  'http://www.w3.org/2001/04/xmldsig-more#rsa-sha256'
#  'http://www.w3.org/2001/04/xmldsig-more#rsa-sha384'
#  'http://www.w3.org/2001/04/xmldsig-more#rsa-sha512'
onelogin.saml2.security.signature_algorithm = http://www.w3.org/2001/04/xmldsig-more#rsa-sha256

# Algorithm that the toolkit will use on digest process. Options:
#  'http://www.w3.org/2000/09/xmldsig#sha1'
#  'http://www.w3.org/2001/04/xmlenc#sha256'
#  'http://www.w3.org/2001/04/xmldsig-more#sha384'
#  'http://www.w3.org/2001/04/xmlenc#sha512'
onelogin.saml2.security.digest_algorithm = http://www.w3.org/2001/04/xmlenc#sha256


# Reject Signatures with deprecated algorithms (sha1)
onelogin.saml2.security.reject_deprecated_alg = true

# Enable trimming of parsed Name IDs and attribute values
# SAML specification states that no trimming for string elements should be performed, so no trimming will be
# performed by default on extracted Name IDs and attribute values. However, some SAML implementations may add
# undesirable surrounding whitespace when outputting XML (possibly due to formatting/pretty-printing).
# These two options allow to optionally enable value trimming on extracted Name IDs (including issuers) and
# attribute values.
onelogin.saml2.parsing.trim_name_ids = false
onelogin.saml2.parsing.trim_attribute_values = false

# Prefix used in generated Unique IDs.
# Optional, defaults to ONELOGIN_ or full ID is like ONELOGIN_ebb0badd-4f60-4b38-b20a-a8e01f0592b1.
# At minimun, the prefix can be non-numeric character such as "_".
# onelogin.saml2.unique_id_prefix = _